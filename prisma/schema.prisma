// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  username     String
  email        String        @unique
  password     String
  role         String        @default("USER")
  Profile      Profile?
  RefreshToken RefreshToken?
  Borrowing    Borrowing[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  photo     String?
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id    String @id @default(uuid())
  name  String @unique
  books Book[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Book {
  id     String @id @default(uuid())
  title  String @unique
  author String

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  coverImage String
  Borrowing  Borrowing[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Borrowing {
  id         String    @id @default(uuid())
  userId     String
  bookId     String
  borrowDate DateTime  @default(now())
  returnDate DateTime?
  status     String    @default("Borrowed") // Borrowed or Returned

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  // Composite unique constraint to prevent duplicate borrow records
  @@unique([userId, bookId, borrowDate])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}
